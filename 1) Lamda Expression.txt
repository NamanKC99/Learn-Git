Java Lambda Expressions

Lambda Expressions were added in Java 8.

A lambda expression is a short block of code which takes in parameters and returns a value. Lambda expressions are similar to methods, but they do not need a name and they can be implemented right in the body of a method.



Functional Interface
Lambda expression provides implementation of functional interface. An interface which has only one abstract method is called functional interface. Java provides an anotation @FunctionalInterface, which is used to declare an interface as functional interface.

Why use Lambda Expression
To provide the implementation of Functional interface.
Less coding.
Java Lambda Expression Syntax
(argument-list) -> {body}  
Java lambda expression is consisted of three components.

1) Argument-list: It can be empty or non-empty as well.

2) Arrow-token: It is used to link arguments-list and body of expression.

3) Body: It contains expressions and statements for lambda expression.

No Parameter Syntax

() -> {  
//Body of no parameter lambda  
}  
One parameter Syntax

(p1) -> {  
//Body of single parameter lambda  
}  
Two Parameter Syntax

(p1,p2) -> {  
//Body of multiple parameter lambda  
}  


WITHOUT LAMBDA EXPRESSION


interface Drawable{  
    public void draw();  
}  
public class LambdaExpressionExample {  
    public static void main(String[] args) {  
        int width=10;  
  
        //without lambda, Drawable implementation using anonymous class  
        Drawable d=new Drawable(){  
            public void draw(){System.out.println("Drawing "+width);}  
        };  
        d.draw();  
    }  
}  
Output:Drawing 10



WITH JAVA LAMBDA EXPRESSION EXAMPLE
NOW,WE ARE GOING TO IMPLEMENT THE ABOVE EXAMPLE WITH THE HELP OF JAVA LAMBDA EXPRESSION.


@FunctionalInterface  //It is optional  
interface Drawable{  
    public void draw();  
}  
  
public class LambdaExpressionExample2 {  
    public static void main(String[] args) {  
        int width=10;  
          
        //with lambda  
        Drawable d2=()->{  
            System.out.println("Drawing "+width);  
        };  
        d2.draw();  
    }  
}  
Output:

Drawing 10
